name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    name: Build & Release
    needs: [prepare]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run tests
        if: matrix.platform == 'linux'
        run: |
          pnpm exec playwright install --with-deps
          pnpm run test

      - name: Build application
        run: pnpm run build

      - name: Package application (Linux)
        if: matrix.platform == 'linux'
        run: pnpm run package:linux

      - name: Package application (Windows)
        if: matrix.platform == 'windows'
        run: pnpm run package:win

      - name: Package application (macOS)
        if: matrix.platform == 'macos'
        run: pnpm run package:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            release/build/*.AppImage
            release/build/*.deb
            release/build/*.rpm
            release/build/*.snap

      - name: Upload Windows artifacts
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            release/build/*.exe
            release/build/*.msi

      - name: Upload macOS artifacts
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: |
            release/build/*.dmg
            release/build/*.zip

  create-release:
    name: Create GitHub Release
    needs: [prepare, build-and-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.version, 'beta') || contains(needs.prepare.outputs.version, 'alpha') }}
          generate_release_notes: true
          files: |
            linux-packages/*
            windows-packages/*
            macos-packages/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
