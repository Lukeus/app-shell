name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libgtk-3-0 \
            libgbm-dev \
            libxss1 \
            libxtst6 \
            libxrandr2 \
            libasound2t64 \
            libpangocairo-1.0-0 \
            libatk1.0-0 \
            libcairo-gobject2 \
            libgtk-3-0 \
            libgdk-pixbuf2.0-0

      - name: Install dependencies
        run: |
          # Install dependencies with Electron binaries
          pnpm config set ignore-scripts false
          pnpm install --frozen-lockfile
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: false

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            dist/
            release/build/
          retention-days: 7

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint, build]
    # TODO: Temporarily disabled due to Electron installation issues in CI
    # Re-enable once Electron binary installation is fixed
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libgtk-3-0 \
            libgbm-dev \
            libxss1 \
            libxtst6 \
            libxrandr2 \
            libasound2t64 \
            libpangocairo-1.0-0 \
            libatk1.0-0 \
            libcairo-gobject2 \
            libgtk-3-0 \
            libgdk-pixbuf2.0-0 \
            xvfb

      - name: Install dependencies
        run: |
          # Install dependencies with Electron binaries
          pnpm config set ignore-scripts false
          pnpm install --frozen-lockfile
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: false

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm run build

      - name: Run tests
        run: xvfb-run -a pnpm run test
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.version }}
      needs_bump: ${{ steps.version.outputs.needs_bump }}
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version
        id: version
        run: |
          # Get current package.json version
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Current package.json version: $PACKAGE_VERSION"
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          # Get latest git tag version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest git tag version: $LATEST_VERSION"

          # Compare versions
          if [ "$PACKAGE_VERSION" != "$LATEST_VERSION" ]; then
            echo "Version mismatch detected"
            echo "needs_bump=true" >> $GITHUB_OUTPUT
            
            # Split version into major, minor, patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Versions match"
            echo "needs_bump=false" >> $GITHUB_OUTPUT
            echo "new_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          fi

  # Quality gate - all jobs must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, build, security-audit, version-check] # test job temporarily disabled
    if: always()
    steps:
      - name: Check all jobs passed
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI jobs passed successfully (test job temporarily disabled)"
